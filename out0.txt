Token(STRING_CONST, ' "bkka\nghjhg "hj')
Token(BLOCKL, '{')
Token(INT, 'int')
Token(VARIABLE, 'i')
Token(ASSIGN, '=')
Token(INTEGER_CONST, 10)
Token(SEMI, ';')
Token(INT, 'int')
Token(VARIABLE, 'i2')
Token(ASSIGN, '=')
Token(INTEGER_CONST, 12)
Token(SEMI, ';')
Token(INT, 'int')
Token(VARIABLE, 'ok')
Token(ASSIGN, '=')
Token(VARIABLE, 'i2')
Token(PLUS, '+')
Token(VARIABLE, 'i')
Token(SEMI, ';')
Token(INT, 'int')
Token(BRACKETL, '[')
Token(INTEGER_CONST, 20)
Token(BRACKETR, ']')
Token(VARIABLE, 'array')
Token(SEMI, ';')
Token(FINAL, 'final')
Token(STRING, 'string')
Token(VARIABLE, 's')
Token(ASSIGN, '=')
Token(STRING_CONST, 'this is a string')
Token(SEMI, ';')
Token(BOOL, 'boolean')
Token(VARIABLE, 't')
Token(ASSIGN, '=')
Token(INTEGER_CONST, 1)
Token(EQUALS, '==')
Token(INTEGER_CONST, 2)
Token(FOR, 'for')
Token(PARENTHISISL, '(')
Token(INT, 'int')
Token(VARIABLE, 'i')
Token(ASSIGN, '=')
Token(INTEGER_CONST, 0)
Token(SEMI, ';')
Token(VARIABLE, 'i')
Token(GREATER, '<')
Token(INTEGER_CONST, 10)
Token(SEMI, ';')
Token(VARIABLE, 'i')
Token(PLUS, '+')
Token(ASSIGN, '=')
Token(INTEGER_CONST, 1)
Token(PARENTHISISR, ')')
Token(BLOCKL, '{')
Token(PRINT, 'print')
Token(PARENTHISISL, '(')
Token(STRING_CONST, 'some string')
Token(PARENTHISISR, ')')
Token(SEMI, ';')
Token(PRINT, 'print')
Token(PARENTHISISL, '(')
Token(TRUE, 'true')
Token(PARENTHISISR, ')')
Token(VARIABLE, 'o')
Token(ASSIGN, '=')
Token(FALSE, 'false')
Token(INT, 'int')
Token(VARIABLE, 's')
Token(ASSIGN, '=')
Token(INTEGER_CONST, 12)
Token(VARIABLE, 'as0')
Token(BLOCKR, '}')
Token(BLOCKR, '}')
Token(COMMENTEND, '*/')
